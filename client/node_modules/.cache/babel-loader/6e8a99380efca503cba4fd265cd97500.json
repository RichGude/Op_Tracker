{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\richg\\\\Documents\\\\Projects\\\\Op_Tracker\\\\client\\\\src\\\\components\\\\OperList.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useContext } from 'react';\nimport { OperContext } from '../context/OperContext';\nimport { AuthoContext } from '../context/AuthContext';\nimport operFinder from '../apis/operFinder';\nimport OperHeader from './OperHeader';\nimport ModalOper from \"./ModalOper\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst OperList = props => {\n  _s();\n\n  const {\n    operations,\n    setOperations\n  } = useContext(OperContext);\n  const {\n    isLoggedIn,\n    setIsLoggedIn\n  } = useContext(AuthoContext); // Define a state for showing a pop-up modal when editing individual data\n\n  const [showModal, setShowModal] = useState(false); // Define a state for setting whether the modal is for adding a new record (true) or updating an old (false)\n\n  const [modalAdd, setModalAdd] = useState(true); // Define a state for saving the id of the operation information to appear in the update model\n\n  const [operID, setOperID] = useState(1);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // The axios get request is added to the baseURL value\n        const response = await operFinder.get(\"api/v1/operations/\");\n        setOperations(response.data.data);\n      } catch (e) {\n        console.log(e);\n      }\n\n      ;\n    };\n\n    fetchData();\n  }, []); // Define function for deleting a record from database\n\n  const handleDelete = async (e, id) => {\n    try {\n      const response = await operFinder.delete(`api/v1/operations/${id}`);\n      console.log(\"Operation successfully deleted\");\n      setOperations(operations.filter(operation => {\n        return operation.id !== id;\n      }));\n    } catch (e) {\n      console.log(e);\n    }\n\n    ;\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main\",\n      children: [/*#__PURE__*/_jsxDEV(OperHeader, {\n        category: 1,\n        handleDelete: handleDelete,\n        showModal: showModal,\n        setShowModal: setShowModal,\n        setModalAdd: setModalAdd,\n        setOperID: setOperID\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(OperHeader, {\n        category: 2,\n        handleDelete: handleDelete,\n        showModal: showModal,\n        setShowModal: setShowModal,\n        setModalAdd: setModalAdd,\n        setOperID: setOperID\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(OperHeader, {\n        category: 3,\n        handleDelete: handleDelete,\n        showModal: showModal,\n        setShowModal: setShowModal,\n        setModalAdd: setModalAdd,\n        setOperID: setOperID\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ModalOper, {\n      modalAdd: modalAdd,\n      showModal: showModal,\n      setShowModal: setShowModal,\n      operID: operID\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(OperList, \"ZDKTLBcxqlGb2Z1kj93zpSi8xk4=\");\n\n_c = OperList;\nexport default OperList;\n\nvar _c;\n\n$RefreshReg$(_c, \"OperList\");","map":{"version":3,"sources":["C:/Users/richg/Documents/Projects/Op_Tracker/client/src/components/OperList.jsx"],"names":["React","useEffect","useState","useContext","OperContext","AuthoContext","operFinder","OperHeader","ModalOper","OperList","props","operations","setOperations","isLoggedIn","setIsLoggedIn","showModal","setShowModal","modalAdd","setModalAdd","operID","setOperID","fetchData","response","get","data","e","console","log","handleDelete","id","delete","filter","operation"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useContext } from 'react';\r\nimport { OperContext } from '../context/OperContext';\r\nimport { AuthoContext } from '../context/AuthContext';\r\nimport operFinder from '../apis/operFinder';\r\nimport OperHeader from './OperHeader';\r\nimport ModalOper from \"./ModalOper\";\r\n\r\nconst OperList = (props) => {\r\n    const { operations, setOperations } = useContext(OperContext);\r\n    const { isLoggedIn, setIsLoggedIn } = useContext(AuthoContext);\r\n\r\n    // Define a state for showing a pop-up modal when editing individual data\r\n    const [ showModal, setShowModal ] = useState(false);\r\n    // Define a state for setting whether the modal is for adding a new record (true) or updating an old (false)\r\n    const [ modalAdd, setModalAdd ] = useState(true);\r\n    // Define a state for saving the id of the operation information to appear in the update model\r\n    const [ operID, setOperID ] = useState(1)\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                // The axios get request is added to the baseURL value\r\n                const response = await operFinder.get(\"api/v1/operations/\");\r\n                setOperations(response.data.data);\r\n            } catch (e) {\r\n                console.log(e);\r\n            };\r\n        };\r\n        \r\n        fetchData();\r\n    }, []);\r\n\r\n    // Define function for deleting a record from database\r\n    const handleDelete = async (e, id) => {\r\n        try {\r\n            const response = await operFinder.delete(`api/v1/operations/${id}`);\r\n            console.log(\"Operation successfully deleted\");\r\n            setOperations(operations.filter(operation => {\r\n                return operation.id !== id;\r\n            }));\r\n        } catch (e) {\r\n            console.log(e);\r\n        };\r\n    };\r\n\r\n    return (<>\r\n        <div className='main'>\r\n            <OperHeader category={1} handleDelete={handleDelete} showModal={showModal} setShowModal={setShowModal} setModalAdd={setModalAdd} setOperID={setOperID} />\r\n            <OperHeader category={2} handleDelete={handleDelete} showModal={showModal} setShowModal={setShowModal} setModalAdd={setModalAdd} setOperID={setOperID} />\r\n            <OperHeader category={3} handleDelete={handleDelete} showModal={showModal} setShowModal={setShowModal} setModalAdd={setModalAdd} setOperID={setOperID} />\r\n        </div>\r\n        <ModalOper modalAdd={modalAdd} showModal={showModal} setShowModal={setShowModal} operID={operID} />\r\n    </>);\r\n};\r\n\r\nexport default OperList;"]},"metadata":{},"sourceType":"module"}