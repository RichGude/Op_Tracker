{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\richg\\\\Documents\\\\Projects\\\\Op_Tracker\\\\client\\\\src\\\\components\\\\TrackerTable.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useContext } from 'react';\nimport operFinder from '../apis/operFinder';\nimport Chart from 'react-apexcharts';\nimport { OperContext } from '../context/OperContext';\nimport { useTable, useSortBy, useFilters, useGlobalFilter, useAsyncDebounce } from 'react-table';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TrackerTable = () => {\n  _s();\n\n  // Call upon the commodities state object from with the Table\n  // (all server fetching and updating will occurs in this component vice the TrackerChart)\n  const {\n    commodities,\n    setCommodities,\n    addCommodities\n  } = useContext(OperContext); // Define a state for saving the id of the commodity information for updating the database\n\n  const [commID, setCommID] = useState(1); // Define a state for saving identifying when the Tracker Data is loaded to know when to show data\n\n  const [isLoaded, setIsLoaded] = useState(false); // Define a state for saving the chart data of the commodity information in the proper form\n\n  const [chartData, setChartData] = useState({\n    // Define a dummy series set before the real data is pulled from the \n    series: [{\n      name: 'XXX',\n      data: [1]\n    }],\n    options: {\n      chart: {\n        type: 'bar',\n        height: 450,\n        stacked: true,\n        toolbar: {\n          show: true\n        },\n        zoom: {\n          enabled: true\n        }\n      },\n      responsive: [{\n        breakpoint: 480,\n        options: {\n          legend: {\n            position: 'bottom',\n            offsetX: -10,\n            offsetY: 0\n          }\n        }\n      }],\n      plotOptions: {\n        bar: {\n          horizontal: false,\n          borderRadius: 10\n        }\n      },\n      xaxis: {\n        categories: ['XXX']\n      },\n      legend: {\n        position: 'right',\n        offsetY: 40\n      },\n      fill: {\n        opacity: 1\n      }\n    }\n  }); // Fetch commidity data from tracker table in database, saving to the commodities context\n\n  useEffect(() => {\n    const fetchTrackerData = async () => {\n      try {\n        // The axios get request is added to the baseURL value\n        const response = await operFinder.get(\"api/v1/tracker/\");\n        setCommodities(response.data.data); // Specify Chart data object with 'series' and 'options' parameters\n\n        let newData = commodities.map(elem => {\n          // Use destructuring to pull out all just metric data\n          const {\n            id,\n            AAA,\n            ...metricData\n          } = elem;\n          return {\n            name: AAA,\n            data: Object.values(metricData)\n          };\n        });\n        console.log(newData); // Specify categories titles\n\n        let cateNames = Object.keys(commodities[0]).slice(2);\n        console.log(cateNames);\n        setChartData({\n          series: newData,\n          options: { ...chartData.options,\n            xaxis: {\n              categories: cateNames\n            }\n          }\n        });\n        setIsLoaded(true);\n        console.log(chartData);\n      } catch (e) {\n        console.log(e);\n      }\n\n      ;\n    };\n\n    fetchTrackerData();\n  }, []);\n  console.log(commodities); // Define function for deleting a record from database\n\n  const handleDelete = async (e, id) => {\n    try {\n      const response = await operFinder.delete(`api/v1/tracker/${id}`);\n      console.log(\"Commodity successfully deleted\");\n      setCommodities(commodities.filter(commodity => {\n        return commodity.id !== id;\n      }));\n    } catch (e) {\n      console.log(e);\n    }\n\n    ;\n  }; // Define list of objects to coincide with ReactTable Format - Changes to Tracker table (adding a column) must be reflected here\n\n\n  const columns = React.useMemo(() => [{\n    Header: 'AAA',\n    accessor: 'AAA'\n  }, {\n    Header: 'BBB',\n    accessor: 'BBB'\n  }, {\n    Header: 'CCC',\n    accessor: 'CCC'\n  }, {\n    Header: 'DDD',\n    accessor: 'DDD'\n  }, {\n    Header: 'EEE',\n    accessor: 'EEE'\n  }, {\n    Header: 'FFF',\n    accessor: 'FFF'\n  }, {\n    Header: 'GGG',\n    accessor: 'GGG'\n  }, {\n    Header: 'HHH',\n    accessor: 'HHH'\n  }, {\n    Header: 'III',\n    accessor: 'III'\n  }, {\n    Header: 'JJJ',\n    accessor: 'JJJ'\n  }, {\n    Header: 'KKK',\n    accessor: 'KKK'\n  }, {\n    Header: 'LLL',\n    accessor: 'LLL'\n  }, {\n    Header: 'MMM',\n    accessor: 'MMM'\n  }, {\n    Header: 'NNN',\n    accessor: 'NNN'\n  }, {\n    Header: 'OOO',\n    accessor: 'OOO'\n  }, {\n    Header: 'PPP',\n    accessor: 'PPP'\n  }, {\n    Header: 'QQQ',\n    accessor: 'QQQ'\n  }, {\n    Header: 'RRR',\n    accessor: 'RRR'\n  }, {\n    Header: 'SSS',\n    accessor: 'SSS'\n  }, {\n    Header: 'TTT',\n    accessor: 'TTT'\n  }, {\n    Header: 'UUU',\n    accessor: 'UUU'\n  }], []); // Define data in a memo-ized format for displaying in react\n\n  const data = React.useMemo(() => commodities); // define the Table structure with the useTable hook\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n    setFilter\n  } = useTable({\n    columns,\n    data\n  }, useFilters, useSortBy); // Define a custom function for rendering Tracker Table (necessary for small time before fetch request of data)\n\n  const renderTable = () => {\n    if (!isLoaded) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 20\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"table\", { ...getTableProps(),\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: headerGroups.map(headerGroup => /*#__PURE__*/_jsxDEV(\"tr\", { ...headerGroup.getHeaderGroupProps(),\n            children: headerGroup.headers.map(column =>\n            /*#__PURE__*/\n            // Add sorting option for each column\n            _jsxDEV(\"th\", { ...column.getHeaderProps(column.getSortByToggleProps()),\n              className: column.isSorted ? column.isSortedDesc ? \"sort-desc\" : \"sort-asc\" : \"\",\n              children: [column.render(\"Header\"), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: column.isSorted ? column.isSortedDesc ? 'ðŸ”½' : 'ðŸ”¼' : ''\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 205,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 199,\n              columnNumber: 37\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", { ...getTableBodyProps(),\n          children: rows.map((row, i) => {\n            prepareRow(row);\n            return /*#__PURE__*/_jsxDEV(\"tr\", { ...row.getRowProps(),\n              children: row.cells.map(cell => {\n                return /*#__PURE__*/_jsxDEV(\"td\", { ...cell.getCellProps(),\n                  children: cell.render(\"Cell\")\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 221,\n                  columnNumber: 44\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 219,\n              columnNumber: 33\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 17\n      }, this);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Chart Technical Operations Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Chart, {\n      options: chartData.options,\n      series: chartData.series,\n      type: \"bar\",\n      height: \"600\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Tabular Technical Operations Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 13\n    }, this), renderTable()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 231,\n    columnNumber: 13\n  }, this);\n};\n\n_s(TrackerTable, \"CbtcNOyF5DL6eMuSxsvPGi2HKsI=\", false, function () {\n  return [useTable];\n});\n\n_c = TrackerTable;\nexport default TrackerTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"TrackerTable\");","map":{"version":3,"sources":["C:/Users/richg/Documents/Projects/Op_Tracker/client/src/components/TrackerTable.jsx"],"names":["React","useEffect","useState","useContext","operFinder","Chart","OperContext","useTable","useSortBy","useFilters","useGlobalFilter","useAsyncDebounce","TrackerTable","commodities","setCommodities","addCommodities","commID","setCommID","isLoaded","setIsLoaded","chartData","setChartData","series","name","data","options","chart","type","height","stacked","toolbar","show","zoom","enabled","responsive","breakpoint","legend","position","offsetX","offsetY","plotOptions","bar","horizontal","borderRadius","xaxis","categories","fill","opacity","fetchTrackerData","response","get","newData","map","elem","id","AAA","metricData","Object","values","console","log","cateNames","keys","slice","e","handleDelete","delete","filter","commodity","columns","useMemo","Header","accessor","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","setFilter","renderTable","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","isSorted","isSortedDesc","render","row","i","getRowProps","cells","cell","getCellProps"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useContext } from 'react';\r\nimport operFinder from '../apis/operFinder';\r\nimport Chart from 'react-apexcharts';\r\nimport { OperContext } from '../context/OperContext';\r\nimport { useTable, useSortBy, useFilters, useGlobalFilter, useAsyncDebounce } from 'react-table';\r\n\r\nconst TrackerTable = () => {\r\n\r\n    // Call upon the commodities state object from with the Table\r\n    // (all server fetching and updating will occurs in this component vice the TrackerChart)\r\n    const { commodities, setCommodities, addCommodities } = useContext(OperContext);\r\n\r\n    // Define a state for saving the id of the commodity information for updating the database\r\n    const [ commID, setCommID ] = useState(1)\r\n    // Define a state for saving identifying when the Tracker Data is loaded to know when to show data\r\n    const [ isLoaded, setIsLoaded ] = useState(false)\r\n\r\n    // Define a state for saving the chart data of the commodity information in the proper form\r\n    const [ chartData, setChartData ] = useState({\r\n        // Define a dummy series set before the real data is pulled from the \r\n        series: [{\r\n            name: 'XXX',\r\n            data: [1]\r\n          }],\r\n        options: {\r\n            chart: {\r\n                type: 'bar',\r\n                height: 450,\r\n                stacked: true,\r\n                toolbar: {\r\n                    show: true\r\n                },\r\n                zoom: {\r\n                    enabled: true\r\n                }\r\n            },\r\n            responsive: [{\r\n                breakpoint: 480,\r\n                options: {\r\n                legend: {\r\n                    position: 'bottom',\r\n                    offsetX: -10,\r\n                    offsetY: 0\r\n                }\r\n                }\r\n            }],\r\n            plotOptions: {\r\n                bar: {\r\n                horizontal: false,\r\n                borderRadius: 10\r\n                },\r\n            },\r\n            xaxis: {\r\n                categories: ['XXX'],\r\n            },\r\n            legend: {\r\n                position: 'right',\r\n                offsetY: 40\r\n            },\r\n            fill: {\r\n                opacity: 1\r\n            }\r\n        },\r\n    });\r\n\r\n    // Fetch commidity data from tracker table in database, saving to the commodities context\r\n    useEffect(() => {\r\n        const fetchTrackerData = async () => {\r\n            try {\r\n                // The axios get request is added to the baseURL value\r\n                const response = await operFinder.get(\"api/v1/tracker/\");\r\n                setCommodities(response.data.data);\r\n\r\n                // Specify Chart data object with 'series' and 'options' parameters\r\n                let newData = commodities.map((elem) => {\r\n                        // Use destructuring to pull out all just metric data\r\n                        const { id, AAA, ...metricData } = elem;\r\n                        return {\r\n                            name: AAA,\r\n                            data: Object.values(metricData)\r\n                        }\r\n                    });\r\n                console.log(newData);\r\n                // Specify categories titles\r\n                let cateNames = Object.keys(commodities[0]).slice(2);\r\n                console.log(cateNames);\r\n\r\n                setChartData(\r\n                    {\r\n                        series: newData,\r\n                        options: {\r\n                            ...chartData.options,\r\n                            xaxis: {\r\n                                categories: cateNames\r\n                            }\r\n                        }\r\n                    }\r\n                );\r\n                setIsLoaded(true);\r\n                console.log(chartData);\r\n            } catch (e) {\r\n                console.log(e);\r\n            };\r\n        };\r\n        fetchTrackerData();\r\n        \r\n    }, []);\r\n    console.log(commodities);\r\n\r\n    // Define function for deleting a record from database\r\n    const handleDelete = async (e, id) => {\r\n        try {\r\n            const response = await operFinder.delete(`api/v1/tracker/${id}`);\r\n            console.log(\"Commodity successfully deleted\");\r\n            setCommodities(commodities.filter(commodity => {\r\n                return commodity.id !== id;\r\n            }));\r\n        } catch (e) {\r\n            console.log(e);\r\n        };\r\n    };\r\n\r\n    // Define list of objects to coincide with ReactTable Format - Changes to Tracker table (adding a column) must be reflected here\r\n    const columns = React.useMemo(() => [\r\n        {   Header: 'AAA',\r\n            accessor: 'AAA'},\r\n        {   Header: 'BBB',\r\n            accessor: 'BBB'},\r\n        {   Header: 'CCC',\r\n            accessor: 'CCC'},\r\n        {   Header: 'DDD',\r\n            accessor: 'DDD'},\r\n        {   Header: 'EEE',\r\n            accessor: 'EEE'},\r\n        {   Header: 'FFF',\r\n            accessor: 'FFF'},\r\n        {   Header: 'GGG',\r\n            accessor: 'GGG'},\r\n        {   Header: 'HHH',\r\n            accessor: 'HHH'},\r\n        {   Header: 'III',\r\n            accessor: 'III'},\r\n        {   Header: 'JJJ',\r\n            accessor: 'JJJ'},\r\n        {   Header: 'KKK',\r\n            accessor: 'KKK'},\r\n        {   Header: 'LLL',\r\n            accessor: 'LLL'},\r\n        {   Header: 'MMM',\r\n            accessor: 'MMM'},\r\n        {   Header: 'NNN',\r\n            accessor: 'NNN'},\r\n        {   Header: 'OOO',\r\n            accessor: 'OOO'},\r\n        {   Header: 'PPP',\r\n            accessor: 'PPP'},\r\n        {   Header: 'QQQ',\r\n            accessor: 'QQQ'},\r\n        {   Header: 'RRR',\r\n            accessor: 'RRR'},\r\n        {   Header: 'SSS',\r\n            accessor: 'SSS'},\r\n        {   Header: 'TTT',\r\n            accessor: 'TTT'},\r\n        {   Header: 'UUU',\r\n            accessor: 'UUU'}\r\n    ], []);\r\n    \r\n    // Define data in a memo-ized format for displaying in react\r\n    const data = React.useMemo(() => commodities);\r\n    \r\n    // define the Table structure with the useTable hook\r\n    const {\r\n        getTableProps,\r\n        getTableBodyProps,\r\n        headerGroups,\r\n        rows,\r\n        prepareRow,\r\n        setFilter\r\n    } = useTable({\r\n            columns,\r\n            data,\r\n        },\r\n        useFilters,\r\n        useSortBy);\r\n\r\n    // Define a custom function for rendering Tracker Table (necessary for small time before fetch request of data)\r\n    const renderTable = () => {\r\n        if (!isLoaded) {\r\n            return <div>Loading</div>\r\n        } else {\r\n            return (\r\n                <table {...getTableProps()}>\r\n                    <thead>\r\n                        {headerGroups.map(headerGroup => (\r\n                            <tr {...headerGroup.getHeaderGroupProps()}>\r\n                                {headerGroup.headers.map(column => (\r\n                                    // Add sorting option for each column\r\n                                    <th {...column.getHeaderProps(column.getSortByToggleProps())}\r\n                                    className={\r\n                                        column.isSorted ?\r\n                                            column.isSortedDesc ? \"sort-desc\" : \"sort-asc\"\r\n                                        : \"\"\r\n                                    }>{column.render(\"Header\")}\r\n                                    <span>\r\n                                        {column.isSorted ?\r\n                                            column.isSortedDesc ? 'ðŸ”½' : 'ðŸ”¼'\r\n                                        : ''}\r\n                                    </span>\r\n                                    </th>\r\n                                ))}\r\n                            </tr>\r\n                        ))}\r\n                    </thead>\r\n                    <tbody {...getTableBodyProps()}>\r\n                        {rows.map((row, i) => {\r\n                            prepareRow(row);\r\n                            return (\r\n                                <tr {...row.getRowProps()}>\r\n                                {row.cells.map(cell => {\r\n                                    return <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>;\r\n                                })}\r\n                                </tr>\r\n                            );\r\n                        })}\r\n                    </tbody>\r\n                </table>\r\n            )}\r\n        };\r\n\r\n    return (<div className='main'>\r\n            <h2>Chart Technical Operations Data</h2>\r\n            <Chart options={chartData.options} series={chartData.series} type=\"bar\" height=\"600\" />\r\n            <h2>Tabular Technical Operations Data</h2>\r\n            {renderTable()}        \r\n        </div>);\r\n};\r\n\r\nexport default TrackerTable;"]},"metadata":{},"sourceType":"module"}