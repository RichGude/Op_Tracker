{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\richg\\\\Documents\\\\Projects\\\\Op_Tracker\\\\client\\\\src\\\\components\\\\TrackerTable.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useContext } from 'react';\nimport operFinder from '../apis/operFinder';\nimport { OperContext } from '../context/OperContext';\nimport { useTable, useSortBy, useFilters, useGlobalFilter, useAsyncDebounce } from 'react-table';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TrackerTable = () => {\n  _s();\n\n  // Call upon the commodities state object from with the Table\n  // (all server fetching and updating will occurs in this component vice the TrackerChart)\n  const {\n    commodities,\n    setCommodities,\n    addCommodities\n  } = useContext(OperContext); // Define a state for saving the id of the commodity information for updating the database\n\n  const [commID, setCommID] = useState(1); // Define a state for saving identifying when the Tracker Data is loaded to know when to show data\n\n  const [isLoaded, setIsLoaded] = useState(false); // Fetch commidity data from tracker table in database, saving to the commodities context\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // The axios get request is added to the baseURL value\n        const response = await operFinder.get(\"api/v1/tracker/\");\n        setCommodities(response.data.data);\n        setIsLoaded(true);\n        console.log(commodities);\n      } catch (e) {\n        console.log(e);\n      }\n\n      ;\n    };\n\n    fetchData();\n  }, []); // Define function for deleting a record from database\n\n  const handleDelete = async (e, id) => {\n    try {\n      const response = await operFinder.delete(`api/v1/tracker/${id}`);\n      console.log(\"Commodity successfully deleted\");\n      setCommodities(commodities.filter(commodity => {\n        return commodity.id !== id;\n      }));\n    } catch (e) {\n      console.log(e);\n    }\n\n    ;\n  }; // // A function for the table rows (interating through each commodity in commodities, and each value in each commodity)\n  // const tableBody = () => {\n  //     // Initialize an empty array to store every row of entries\n  //     let bodyList = [];\n  //     commodities.map(commodity => {\n  //         let feature_list = [];\n  //         // For each feature in each commodity, add to the feature to list and push to bodyList \n  //         Object.keys(commodity).map(feature_key => (\n  //             feature_list.push(\n  //                 <td key={(commodity.id.toString()+feature_key)}>\n  //                     {commodity[feature_key]}\n  //                 </td>\n  //             )\n  //         ));\n  //         bodyList.push(<tr>{feature_list}</tr>);\n  //     })\n  //     return bodyList;\n  // };\n  // Define a function that only runs after the data \n  // Define list of objects to coincide with ReactTable Format - Changes to Tracker table (adding a column) must be reflected here\n\n\n  const columns = React.useMemo(() => [{\n    Header: 'AAA',\n    accessor: 'AAA'\n  }, {\n    Header: 'BBB',\n    accessor: 'BBB'\n  }, {\n    Header: 'CCC',\n    accessor: 'CCC'\n  }, {\n    Header: 'DDD',\n    accessor: 'DDD'\n  }, {\n    Header: 'EEE',\n    accessor: 'EEE'\n  }, {\n    Header: 'FFF',\n    accessor: 'FFF'\n  }, {\n    Header: 'GGG',\n    accessor: 'GGG'\n  }, {\n    Header: 'HHH',\n    accessor: 'HHH'\n  }, {\n    Header: 'III',\n    accessor: 'III'\n  }, {\n    Header: 'JJJ',\n    accessor: 'JJJ'\n  }, {\n    Header: 'KKK',\n    accessor: 'KKK'\n  }, {\n    Header: 'LLL',\n    accessor: 'LLL'\n  }, {\n    Header: 'MMM',\n    accessor: 'MMM'\n  }, {\n    Header: 'NNN',\n    accessor: 'NNN'\n  }, {\n    Header: 'OOO',\n    accessor: 'OOO'\n  }, {\n    Header: 'PPP',\n    accessor: 'PPP'\n  }, {\n    Header: 'QQQ',\n    accessor: 'QQQ'\n  }, {\n    Header: 'RRR',\n    accessor: 'RRR'\n  }, {\n    Header: 'SSS',\n    accessor: 'SSS'\n  }, {\n    Header: 'TTT',\n    accessor: 'TTT'\n  }, {\n    Header: 'UUU',\n    accessor: 'UUU'\n  }], []); //const data = React.useMemo(() => commodities);\n  // define the Table structure with the useTable hook\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow\n  } = useTable({\n    columns,\n    commodities //defaultColumn, // Be sure to pass the defaultColumn option\n\n  }); // Define a custom function for rendering Tracker Table (necessary for small time before fetch request of data)\n\n  const renderTable = () => {\n    console.log('renderTable');\n\n    if (!isLoaded) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 20\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"table\", { ...getTableProps(),\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: headerGroups.map(headerGroup => /*#__PURE__*/_jsxDEV(\"tr\", { ...headerGroup.getHeaderGroupProps(),\n            children: headerGroup.headers.map(column => /*#__PURE__*/_jsxDEV(\"th\", { ...column.getHeaderProps(),\n              children: column.render(\"Header\")\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 141,\n              columnNumber: 37\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", { ...getTableBodyProps(),\n          children: rows.map((row, i) => {\n            prepareRow(row);\n            return /*#__PURE__*/_jsxDEV(\"tr\", { ...row.getRowProps(),\n              children: row.cells.map(cell => {\n                return /*#__PURE__*/_jsxDEV(\"td\", { ...cell.getCellProps(),\n                  children: cell.render(\"Cell\")\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 152,\n                  columnNumber: 44\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 150,\n              columnNumber: 33\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 17\n      }, this);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Tabular Technical Operations Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 9\n    }, this), renderTable()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 162,\n    columnNumber: 13\n  }, this);\n};\n\n_s(TrackerTable, \"roVSi2cYoEPshajROQYF/58fq9U=\", false, function () {\n  return [useTable];\n});\n\n_c = TrackerTable;\nexport default TrackerTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"TrackerTable\");","map":{"version":3,"sources":["C:/Users/richg/Documents/Projects/Op_Tracker/client/src/components/TrackerTable.jsx"],"names":["React","useEffect","useState","useContext","operFinder","OperContext","useTable","useSortBy","useFilters","useGlobalFilter","useAsyncDebounce","TrackerTable","commodities","setCommodities","addCommodities","commID","setCommID","isLoaded","setIsLoaded","fetchData","response","get","data","console","log","e","handleDelete","id","delete","filter","commodity","columns","useMemo","Header","accessor","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","renderTable","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","row","i","getRowProps","cells","cell","getCellProps"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useContext } from 'react';\r\nimport operFinder from '../apis/operFinder';\r\nimport { OperContext } from '../context/OperContext';\r\nimport { useTable, useSortBy, useFilters, useGlobalFilter, useAsyncDebounce } from 'react-table';\r\n\r\nconst TrackerTable = () => {\r\n\r\n    // Call upon the commodities state object from with the Table\r\n    // (all server fetching and updating will occurs in this component vice the TrackerChart)\r\n    const { commodities, setCommodities, addCommodities } = useContext(OperContext);\r\n\r\n    // Define a state for saving the id of the commodity information for updating the database\r\n    const [ commID, setCommID ] = useState(1)\r\n    // Define a state for saving identifying when the Tracker Data is loaded to know when to show data\r\n    const [ isLoaded, setIsLoaded ] = useState(false)\r\n\r\n    // Fetch commidity data from tracker table in database, saving to the commodities context\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                // The axios get request is added to the baseURL value\r\n                const response = await operFinder.get(\"api/v1/tracker/\");\r\n                setCommodities(response.data.data);\r\n                setIsLoaded(true);\r\n                console.log(commodities);\r\n            } catch (e) {\r\n                console.log(e);\r\n            };\r\n        };\r\n        fetchData();\r\n    }, []);\r\n\r\n    // Define function for deleting a record from database\r\n    const handleDelete = async (e, id) => {\r\n        try {\r\n            const response = await operFinder.delete(`api/v1/tracker/${id}`);\r\n            console.log(\"Commodity successfully deleted\");\r\n            setCommodities(commodities.filter(commodity => {\r\n                return commodity.id !== id;\r\n            }));\r\n        } catch (e) {\r\n            console.log(e);\r\n        };\r\n    };\r\n\r\n    // // A function for the table rows (interating through each commodity in commodities, and each value in each commodity)\r\n    // const tableBody = () => {\r\n    //     // Initialize an empty array to store every row of entries\r\n    //     let bodyList = [];\r\n    //     commodities.map(commodity => {\r\n    //         let feature_list = [];\r\n    //         // For each feature in each commodity, add to the feature to list and push to bodyList \r\n    //         Object.keys(commodity).map(feature_key => (\r\n    //             feature_list.push(\r\n    //                 <td key={(commodity.id.toString()+feature_key)}>\r\n    //                     {commodity[feature_key]}\r\n    //                 </td>\r\n    //             )\r\n    //         ));\r\n    //         bodyList.push(<tr>{feature_list}</tr>);\r\n    //     })\r\n        \r\n    //     return bodyList;\r\n    // };\r\n    \r\n    // Define a function that only runs after the data \r\n\r\n    // Define list of objects to coincide with ReactTable Format - Changes to Tracker table (adding a column) must be reflected here\r\n    const columns = React.useMemo(() => [\r\n        {   Header: 'AAA',\r\n            accessor: 'AAA'},\r\n        {   Header: 'BBB',\r\n            accessor: 'BBB'},\r\n        {   Header: 'CCC',\r\n            accessor: 'CCC'},\r\n        {   Header: 'DDD',\r\n            accessor: 'DDD'},\r\n        {   Header: 'EEE',\r\n            accessor: 'EEE'},\r\n        {   Header: 'FFF',\r\n            accessor: 'FFF'},\r\n        {   Header: 'GGG',\r\n            accessor: 'GGG'},\r\n        {   Header: 'HHH',\r\n            accessor: 'HHH'},\r\n        {   Header: 'III',\r\n            accessor: 'III'},\r\n        {   Header: 'JJJ',\r\n            accessor: 'JJJ'},\r\n        {   Header: 'KKK',\r\n            accessor: 'KKK'},\r\n        {   Header: 'LLL',\r\n            accessor: 'LLL'},\r\n        {   Header: 'MMM',\r\n            accessor: 'MMM'},\r\n        {   Header: 'NNN',\r\n            accessor: 'NNN'},\r\n        {   Header: 'OOO',\r\n            accessor: 'OOO'},\r\n        {   Header: 'PPP',\r\n            accessor: 'PPP'},\r\n        {   Header: 'QQQ',\r\n            accessor: 'QQQ'},\r\n        {   Header: 'RRR',\r\n            accessor: 'RRR'},\r\n        {   Header: 'SSS',\r\n            accessor: 'SSS'},\r\n        {   Header: 'TTT',\r\n            accessor: 'TTT'},\r\n        {   Header: 'UUU',\r\n            accessor: 'UUU'}\r\n    ], []);\r\n    \r\n    //const data = React.useMemo(() => commodities);\r\n    \r\n    // define the Table structure with the useTable hook\r\n    const {\r\n        getTableProps,\r\n        getTableBodyProps,\r\n        headerGroups,\r\n        rows,\r\n        prepareRow,\r\n    } = useTable({\r\n        columns,\r\n        commodities,\r\n        //defaultColumn, // Be sure to pass the defaultColumn option\r\n        });\r\n\r\n    // Define a custom function for rendering Tracker Table (necessary for small time before fetch request of data)\r\n    const renderTable = () => {\r\n        console.log('renderTable');\r\n        if (!isLoaded) {\r\n            return <div>Loading</div>\r\n        } else {\r\n            return (\r\n                <table {...getTableProps()}>\r\n                    <thead>\r\n                        {headerGroups.map(headerGroup => (\r\n                            <tr {...headerGroup.getHeaderGroupProps()}>\r\n                                {headerGroup.headers.map(column => (\r\n                                    <th {...column.getHeaderProps()}>{column.render(\"Header\")}</th>\r\n                                ))}\r\n                            </tr>\r\n                        ))}\r\n                    </thead>\r\n                    <tbody {...getTableBodyProps()}>\r\n                        {rows.map((row, i) => {\r\n                            prepareRow(row);\r\n                            return (\r\n                                <tr {...row.getRowProps()}>\r\n                                {row.cells.map(cell => {\r\n                                    return <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>;\r\n                                })}\r\n                                </tr>\r\n                            );\r\n                        })}\r\n                    </tbody>\r\n                </table>\r\n            )}\r\n        };\r\n\r\n    return (<div className='main'>\r\n        <h2>Tabular Technical Operations Data</h2>\r\n        {renderTable()}        \r\n    </div>);\r\n};\r\n\r\nexport default TrackerTable;"]},"metadata":{},"sourceType":"module"}