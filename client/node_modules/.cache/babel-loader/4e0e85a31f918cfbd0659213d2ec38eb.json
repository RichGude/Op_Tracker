{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\richg\\\\Documents\\\\Projects\\\\Op_Tracker\\\\client\\\\src\\\\components\\\\Login.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useContext } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Popover from 'react-bootstrap/Popover';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport { AuthoContext } from '../context/AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Login = () => {\n  _s();\n\n  // Use AuthoContext for Admin User authentication\n  const {\n    isLoggedIn,\n    setIsLoggedIn\n  } = useContext(AuthoContext); // Handle login submit\n\n  const handleSubmit = e => {\n    var errorBox = document.getElementById(\"error-message\"); // If the user is not logged in already, prompt for password to log in\n\n    if (!isLoggedIn) {\n      // Confirm the right password is generated, and log in the admin user\n      // This is basic, but doesn't have to be any more advanced - this is only a monitoring app\n      if (document.getElementById(\"login-password\").value == 'TriggerWarning') {\n        errorBox.classList.add('transparent');\n        setIsLoggedIn(!isLoggedIn);\n      } else {\n        // If the user doesn't put in the right password\n        errorBox.classList.remove('transparent');\n        document.getElementById(\"login-password\").value = '';\n      }\n    } else {\n      // If the user is logged in, allow the user to logout\n      setIsLoggedIn(!isLoggedIn);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(OverlayTrigger, {\n    trigger: \"click\",\n    placement: \"bottom\",\n    overlay: /*#__PURE__*/_jsxDEV(Popover, {\n      id: \"login-popover\",\n      className: \"popover\",\n      children: [/*#__PURE__*/_jsxDEV(Popover.Header, {\n        as: \"h3\",\n        children: isLoggedIn ? \"Logout TechOps Admin\" : \"Login TechOps Admin\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Popover.Body, {\n        children: [isLoggedIn ? /*#__PURE__*/_jsxDEV(\"h6\", {\n          children: \"Confirm logout:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 39\n        }, this) : /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          className: \"pop-search\",\n          id: \"login-password\",\n          placeholder: \"password\",\n          spellCheck: false\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 66\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"error-message\",\n          className: \"text-danger transparent\",\n          children: /*#__PURE__*/_jsxDEV(\"small\", {\n            children: \"Wrong Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 85\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          onClick: e => handleSubmit(e),\n          className: \"login center\",\n          children: isLoggedIn ? \"Confirm\" : \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 21\n    }, this),\n    rootClose: true,\n    children: /*#__PURE__*/_jsxDEV(Button, {\n      className: \"login\",\n      children: isLoggedIn ? \"LOGOUT\" : \"LOGIN\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 13\n  }, this);\n};\n\n_s(Login, \"7/7G4d2noKoGXtVl70Yqq+sihGo=\");\n\n_c = Login;\nexport default Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["C:/Users/richg/Documents/Projects/Op_Tracker/client/src/components/Login.jsx"],"names":["React","useContext","Button","Popover","OverlayTrigger","AuthoContext","Login","isLoggedIn","setIsLoggedIn","handleSubmit","e","errorBox","document","getElementById","value","classList","add","remove"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAmC,OAAnC;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,OAAOC,OAAP,MAAoB,yBAApB;AACA,OAAOC,cAAP,MAA2B,gCAA3B;AAEA,SAASC,YAAT,QAA6B,wBAA7B;;;AAEA,MAAMC,KAAK,GAAG,MAAM;AAAA;;AAChB;AACA,QAAM;AAAEC,IAAAA,UAAF;AAAcC,IAAAA;AAAd,MAAgCP,UAAU,CAACI,YAAD,CAAhD,CAFgB,CAIhB;;AACA,QAAMI,YAAY,GAAIC,CAAD,IAAO;AACxB,QAAIC,QAAQ,GAAGC,QAAQ,CAACC,cAAT,CAAwB,eAAxB,CAAf,CADwB,CAGxB;;AACA,QAAI,CAACN,UAAL,EAAiB;AACjB;AACA;AACA,UAAIK,QAAQ,CAACC,cAAT,CAAwB,gBAAxB,EAA0CC,KAA1C,IAAmD,gBAAvD,EAAyE;AACrEH,QAAAA,QAAQ,CAACI,SAAT,CAAmBC,GAAnB,CAAuB,aAAvB;AACAR,QAAAA,aAAa,CAAC,CAACD,UAAF,CAAb;AACH,OAHD,MAGO;AACH;AACAI,QAAAA,QAAQ,CAACI,SAAT,CAAmBE,MAAnB,CAA0B,aAA1B;AACAL,QAAAA,QAAQ,CAACC,cAAT,CAAwB,gBAAxB,EAA0CC,KAA1C,GAAkD,EAAlD;AACH;AACA,KAXD,MAWO;AACH;AACAN,MAAAA,aAAa,CAAC,CAACD,UAAF,CAAb;AACH;AACJ,GAnBD;;AAqBA,sBACQ,QAAC,cAAD;AACI,IAAA,OAAO,EAAC,OADZ;AAEI,IAAA,SAAS,EAAC,QAFd;AAGI,IAAA,OAAO,eACH,QAAC,OAAD;AAAS,MAAA,EAAE,EAAC,eAAZ;AAA4B,MAAA,SAAS,EAAC,SAAtC;AAAA,8BACA,QAAC,OAAD,CAAS,MAAT;AAAgB,QAAA,EAAE,EAAC,IAAnB;AAAA,kBAAyBA,UAAU,GAAG,sBAAH,GAA4B;AAA/D;AAAA;AAAA;AAAA;AAAA,cADA,eAEA,QAAC,OAAD,CAAS,IAAT;AAAA,mBACKA,UAAU,gBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAH,gBAA8B;AAAO,UAAA,IAAI,EAAC,MAAZ;AAAmB,UAAA,SAAS,EAAC,YAA7B;AAA0C,UAAA,EAAE,EAAC,gBAA7C;AAA8D,UAAA,WAAW,EAAC,UAA1E;AAAqF,UAAA,UAAU,EAAE;AAAjG;AAAA;AAAA;AAAA;AAAA,gBAD7C,eAEI;AAAK,UAAA,EAAE,EAAC,eAAR;AAAwB,UAAA,SAAS,EAAC,yBAAlC;AAAA,iCAA4D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA5D;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAII,QAAC,MAAD;AAAQ,UAAA,IAAI,EAAC,QAAb;AAAsB,UAAA,OAAO,EAAGG,CAAD,IAAOD,YAAY,CAACC,CAAD,CAAlD;AAAuD,UAAA,SAAS,EAAC,cAAjE;AAAA,oBAAiFH,UAAU,GAAG,SAAH,GAAe;AAA1G;AAAA;AAAA;AAAA;AAAA,gBAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAFA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJR;AAcI,IAAA,SAAS,MAdb;AAAA,2BAeI,QAAC,MAAD;AAAQ,MAAA,SAAS,EAAC,OAAlB;AAAA,gBAA2BA,UAAU,GAAG,QAAH,GAAc;AAAnD;AAAA;AAAA;AAAA;AAAA;AAfJ;AAAA;AAAA;AAAA;AAAA,UADR;AAmBH,CA7CD;;GAAMD,K;;KAAAA,K;AA+CN,eAAeA,KAAf","sourcesContent":["import React, { useContext }  from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Popover from 'react-bootstrap/Popover';\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\r\n\r\nimport { AuthoContext } from '../context/AuthContext';\r\n\r\nconst Login = () => {\r\n    // Use AuthoContext for Admin User authentication\r\n    const { isLoggedIn, setIsLoggedIn } = useContext(AuthoContext);\r\n\r\n    // Handle login submit\r\n    const handleSubmit = (e) => {\r\n        var errorBox = document.getElementById(\"error-message\");\r\n\r\n        // If the user is not logged in already, prompt for password to log in\r\n        if (!isLoggedIn) {\r\n        // Confirm the right password is generated, and log in the admin user\r\n        // This is basic, but doesn't have to be any more advanced - this is only a monitoring app\r\n        if (document.getElementById(\"login-password\").value == 'TriggerWarning') {\r\n            errorBox.classList.add('transparent');\r\n            setIsLoggedIn(!isLoggedIn);\r\n        } else {\r\n            // If the user doesn't put in the right password\r\n            errorBox.classList.remove('transparent');\r\n            document.getElementById(\"login-password\").value = '';\r\n        }\r\n        } else {\r\n            // If the user is logged in, allow the user to logout\r\n            setIsLoggedIn(!isLoggedIn);\r\n        }\r\n    };\r\n\r\n    return (\r\n            <OverlayTrigger\r\n                trigger=\"click\"\r\n                placement='bottom'\r\n                overlay={\r\n                    <Popover id='login-popover' className='popover'>\r\n                    <Popover.Header as=\"h3\">{isLoggedIn ? \"Logout TechOps Admin\" : \"Login TechOps Admin\"}</Popover.Header>\r\n                    <Popover.Body>\r\n                        {isLoggedIn ? <h6>Confirm logout:</h6> : <input type=\"text\" className='pop-search' id='login-password' placeholder='password' spellCheck={false} />}\r\n                        <div id='error-message' className=\"text-danger transparent\"><small>Wrong Password</small></div>\r\n                        {/* <Button type='submit' onClick={(e) => handleSubmit(e)} className=\"login center\">{isLoggedIn ? \"Confirm\" : \"Submit\"}</Button> */}\r\n                        <Button type='submit' onClick={(e) => handleSubmit(e)} className=\"login center\">{isLoggedIn ? \"Confirm\" : \"Submit\"}</Button>\r\n                    </Popover.Body>\r\n                    </Popover>\r\n                }\r\n                rootClose>\r\n                <Button className=\"login\">{isLoggedIn ? \"LOGOUT\" : \"LOGIN\"}</Button>\r\n            </OverlayTrigger>\r\n    );\r\n};\r\n\r\nexport default Login;"]},"metadata":{},"sourceType":"module"}