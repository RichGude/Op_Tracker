{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\richg\\\\Documents\\\\Projects\\\\Op_Tracker\\\\client\\\\src\\\\components\\\\ModalTrack.jsx\",\n    _s = $RefreshSig$();\n\n// This component is an appearing modal that is used to either update known entries for the Tracker data (Table and Chart data) or \n//    create new ones, based on the boolean state, addModal, which is true for the latter and false for the former\nimport React, { useRef, useState, useContext, useEffect, useCallback } from 'react';\nimport operFinder from '../apis/operFinder';\nimport { OperContext } from '../context/OperContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ModalTrack = _ref => {\n  _s();\n\n  let {\n    trackModalAdd,\n    showTrackModal,\n    setShowTrackModal,\n    trackID\n  } = _ref;\n  // Call upon the commodites state object (for Tracker data) from within Modal\n  const {\n    commodities,\n    setCommodities,\n    addCommodities\n  } = useContext(OperContext); // Define internal state variables to use\n\n  const [AAA, setAAA] = useState(\"Sample\");\n  const [BBB, setBBB] = useState(0);\n  const [CCC, setCCC] = useState(0);\n  const [DDD, setDDD] = useState(0);\n  const [EEE, setEEE] = useState(0);\n  const [FFF, setFFF] = useState(0);\n  const [GGG, setGGG] = useState(0);\n  const [HHH, setHHH] = useState(0);\n  const [III, setIII] = useState(0);\n  const [JJJ, setJJJ] = useState(0);\n  const [KKK, setKKK] = useState(0);\n  const [LLL, setLLL] = useState(0);\n  const [MMM, setMMM] = useState(0);\n  const [NNN, setNNN] = useState(0);\n  const [OOO, setOOO] = useState(0);\n  const [PPP, setPPP] = useState(0);\n  const [QQQ, setQQQ] = useState(0);\n  const [RRR, setRRR] = useState(0);\n  const [SSS, setSSS] = useState(0);\n  const [TTT, setTTT] = useState(0);\n  const [UUU, setUUU] = useState(0); // Don't show the modal animation upon first render\n\n  const firstRender = useRef(true); // Whenever the modal comes up (i.e., showModel becomes true): run the fetch request from the database if the modal is needed to update, or reset \n\n  useEffect(() => {\n    if (!firstRender) return;\n\n    if (showTrackModal) {\n      // If the modal is used to add a new record, reset the feature values (in case the modal was previously used)\n      if (trackModalAdd) {\n        setAAA(\"Sample\");\n        setBBB(0);\n        setCCC(0);\n        setDDD(0);\n        setEEE(0);\n        setFFF(0);\n        setGGG(0);\n        setHHH(0);\n        setIII(0);\n        setJJJ(0);\n        setKKK(0);\n        setLLL(0);\n        setMMM(0);\n        setNNN(0);\n        setOOO(0);\n        setPPP(0);\n        setQQQ(0);\n        setRRR(0);\n        setSSS(0);\n        setTTT(0);\n        setUUU(0);\n      } else {\n        // If the modal is used to update an existing record, fill in the feature values with what already exists.\n        const fetchData = async () => {\n          // Get data about the tracker line highlighted\n          const response = await operFinder.get(`api/v1/tracker/${trackID}`);\n          setAAA(response.data.data.AAA);\n          setBBB(response.data.data.BBB);\n          setCCC(response.data.data.CCC);\n          setDDD(response.data.data.DDD);\n          setEEE(response.data.data.EEE);\n          setFFF(response.data.data.FFF);\n          setGGG(response.data.data.GGG);\n          setHHH(response.data.data.HHH);\n          setIII(response.data.data.III);\n          setJJJ(response.data.data.JJJ);\n          setKKK(response.data.data.KKK);\n          setLLL(response.data.data.LLL);\n          setMMM(response.data.data.MMM);\n          setNNN(response.data.data.NNN);\n          setOOO(response.data.data.OOO);\n          setPPP(response.data.data.PPP);\n          setQQQ(response.data.data.QQQ);\n          setRRR(response.data.data.RRR);\n          setSSS(response.data.data.SSS);\n          setTTT(response.data.data.TTT);\n          setUUU(response.data.data.UUU);\n        };\n\n        fetchData();\n      }\n    }\n  }, [showTrackModal]); // Need fade in and out for modal on every showTrackModal change except initial render\n\n  useEffect(() => {\n    if (firstRender.current) {\n      firstRender.current = false;\n    } else {\n      trackModalRef.current.className = showTrackModal ? 'backFadeIn' : 'back FadeOut';\n    }\n  }, [showTrackModal]); // Define function for modal submit\n\n  const handleSubmit = async e => {\n    // Don't reload page on submit\n    e.preventDefault(); // Add a new record to the database\n\n    if (trackModalAdd) {\n      // Use a try-catch block with an asyncronous function\n      try {\n        // Post new entries to the Pool baseURL\n        const response = await operFinder.post(\"api/v1/tracker/\", {\n          AAA,\n          BBB,\n          CCC,\n          DDD,\n          EEE,\n          FFF,\n          GGG,\n          HHH,\n          III,\n          JJJ,\n          KKK,\n          LLL,\n          MMM,\n          NNN,\n          OOO,\n          PPP,\n          QQQ,\n          RRR,\n          SSS,\n          TTT,\n          UUU\n        }); // Add new entries to the local state object (no need for new server pull)\n\n        addCommodities(response.data.data);\n        console.log(\"Tracker post successfully added\");\n      } catch (e) {\n        console.log(e);\n      }\n\n      ;\n    } else {\n      // Update database\n      try {\n        const updateCommodity = await operFinder.put(`api/v1/tracker/${trackID}`, {\n          AAA,\n          BBB,\n          CCC,\n          DDD,\n          EEE,\n          FFF,\n          GGG,\n          HHH,\n          III,\n          JJJ,\n          KKK,\n          LLL,\n          MMM,\n          NNN,\n          OOO,\n          PPP,\n          QQQ,\n          RRR,\n          SSS,\n          TTT,\n          UUU\n        }); // Update commodities context so cards show new results\n\n        const updateTrack = {\n          id: trackID,\n          AAA,\n          BBB,\n          CCC,\n          DDD,\n          EEE,\n          FFF,\n          GGG,\n          HHH,\n          III,\n          JJJ,\n          KKK,\n          LLL,\n          MMM,\n          NNN,\n          OOO,\n          PPP,\n          QQQ,\n          RRR,\n          SSS,\n          TTT,\n          UUU\n        };\n        setCommodities(commodities.map(el => el.id === updateTrack.id ? updateTrack : el));\n        console.log(\"Tracker post successfully updated\");\n      } catch (e) {\n        console.log(e);\n      }\n    } // Don't show modal after submit\n\n\n    setShowTrackModal(!showTrackModal);\n  }; // Close Modal if clicking on the background (i.e., outside the modal)\n\n\n  const trackModalRef = useRef();\n\n  const closeModal = e => {\n    if (trackModalRef.current === e.target) {\n      setShowTrackModal(false);\n    }\n  }; // Set use to dismiss Modal on 'esc' key press only when Modal is up\n\n\n  const keyPress = useCallback(e => {\n    if (e.key === 'Escape' && showTrackModal) {\n      setShowTrackModal(false);\n    }\n  }, [showTrackModal]);\n  useEffect(() => {\n    document.addEventListener('keydown', keyPress);\n    return () => document.removeEventListener('keydown', keyPress);\n  }, [keyPress]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"back\",\n    ref: trackModalRef,\n    onClick: closeModal,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ModalWrapper\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ModalContent\",\n        children: [trackModalAdd ? /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Add New Commodity\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 38\n        }, this) : /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Update Commodity\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 67\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          action: \"\",\n          className: \"container\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-12 mb-2\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"descriptor\",\n                htmlFor: \"modal_AAA\",\n                children: \"AAA\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 175,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                id: \"modal_AAA\",\n                value: AAA,\n                onChange: e => setAAA(e.target.value),\n                type: \"text\",\n                className: \"form-control required\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 176,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"descr\",\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"warning-text\",\n                  children: \"Required AAA Name and each value below\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 177,\n                  columnNumber: 52\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 177,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 174,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-2 mb-2\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"descriptor\",\n                htmlFor: \"modal_BBB\",\n                children: \"BBB\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 181,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                id: \"modal_BBB\",\n                value: BBB,\n                onChange: e => setBBB(e.target.value),\n                type: \"text\",\n                className: \"form-control required\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 182,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 180,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-2 mb-2\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"descriptor\",\n                htmlFor: \"modal_CCC\",\n                children: \"CCC\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 186,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                id: \"modal_CCC\",\n                value: CCC,\n                onChange: e => setCCC(e.target.value),\n                type: \"text\",\n                className: \"form-control required\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 187,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 185,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-2 mb-2\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"descriptor\",\n                htmlFor: \"modal_DDD\",\n                children: \"DDD\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 191,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                id: \"modal_DDD\",\n                value: DDD,\n                onChange: e => setDDD(e.target.value),\n                type: \"text\",\n                className: \"form-control required\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 192,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 190,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-2 mb-2\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"descriptor\",\n                htmlFor: \"modal_EEE\",\n                children: \"EEE\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 196,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                id: \"modal_EEE\",\n                value: EEE,\n                onChange: e => setEEE(e.target.value),\n                type: \"text\",\n                className: \"form-control required\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 197,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 195,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-2 mb-2\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"descriptor\",\n                htmlFor: \"modal_FFF\",\n                children: \"FFF\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 201,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                id: \"modal_FFF\",\n                value: FFF,\n                onChange: e => setFFF(e.target.value),\n                type: \"text\",\n                className: \"form-control required\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 202,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 200,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-2 mb-2\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"descriptor\",\n                htmlFor: \"modal_GGG\",\n                children: \"GGG\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 206,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                id: \"modal_GGG\",\n                value: GGG,\n                onChange: e => setGGG(e.target.value),\n                type: \"text\",\n                className: \"form-control required\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 207,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 205,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-2 mb-2\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"descriptor\",\n                htmlFor: \"modal_HHH\",\n                children: \"HHH\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 211,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                id: \"modal_HHH\",\n                value: HHH,\n                onChange: e => setHHH(e.target.value),\n                type: \"text\",\n                className: \"form-control required\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 212,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 210,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-2 mb-2\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"descriptor\",\n                htmlFor: \"modal_III\",\n                children: \"III\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 216,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                id: \"modal_III\",\n                value: III,\n                onChange: e => setIII(e.target.value),\n                type: \"text\",\n                className: \"form-control required\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 217,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 215,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-2 mb-2\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"descriptor\",\n                htmlFor: \"modal_JJJ\",\n                children: \"JJJ\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 221,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                id: \"modal_JJJ\",\n                value: JJJ,\n                onChange: e => setJJJ(e.target.value),\n                type: \"text\",\n                className: \"form-control required\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 222,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 220,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-2 mb-2\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"descriptor\",\n                htmlFor: \"modal_KKK\",\n                children: \"KKK\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 226,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                id: \"modal_KKK\",\n                value: KKK,\n                onChange: e => setKKK(e.target.value),\n                type: \"text\",\n                className: \"form-control required\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 227,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 225,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-2 mb-2\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"descriptor\",\n                htmlFor: \"modal_LLL\",\n                children: \"LLL\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 231,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                id: \"modal_LLL\",\n                value: LLL,\n                onChange: e => setLLL(e.target.value),\n                type: \"text\",\n                className: \"form-control required\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 232,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 230,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-2 mb-2\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"descriptor\",\n                htmlFor: \"modal_MMM\",\n                children: \"MMM\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 236,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                id: \"modal_MMM\",\n                value: MMM,\n                onChange: e => setMMM(e.target.value),\n                type: \"text\",\n                className: \"form-control required\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 237,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 235,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-2 mb-2\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"descriptor\",\n                htmlFor: \"modal_NNN\",\n                children: \"NNN\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 241,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                id: \"modal_NNN\",\n                value: NNN,\n                onChange: e => setNNN(e.target.value),\n                type: \"text\",\n                className: \"form-control required\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 242,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 240,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-2 mb-2\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"descriptor\",\n                htmlFor: \"modal_OOO\",\n                children: \"OOO\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 246,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                id: \"modal_OOO\",\n                value: OOO,\n                onChange: e => setOOO(e.target.value),\n                type: \"text\",\n                className: \"form-control required\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 247,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 245,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-2 mb-2\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"descriptor\",\n                htmlFor: \"modal_PPP\",\n                children: \"PPP\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 251,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                id: \"modal_PPP\",\n                value: PPP,\n                onChange: e => setPPP(e.target.value),\n                type: \"text\",\n                className: \"form-control required\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 252,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 250,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-2 mb-2\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"descriptor\",\n                htmlFor: \"modal_QQQ\",\n                children: \"QQQ\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 256,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                id: \"modal_QQQ\",\n                value: QQQ,\n                onChange: e => setQQQ(e.target.value),\n                type: \"text\",\n                className: \"form-control required\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 257,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 255,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-2 mb-2\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"descriptor\",\n                htmlFor: \"modal_RRR\",\n                children: \"RRR\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 261,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                id: \"modal_RRR\",\n                value: RRR,\n                onChange: e => setRRR(e.target.value),\n                type: \"text\",\n                className: \"form-control required\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 262,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 260,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-2 mb-2\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"descriptor\",\n                htmlFor: \"modal_SSS\",\n                children: \"SSS\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 266,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                id: \"modal_SSS\",\n                value: SSS,\n                onChange: e => setSSS(e.target.value),\n                type: \"text\",\n                className: \"form-control required\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 267,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 265,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-2 mb-2\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"descriptor\",\n                htmlFor: \"modal_TTT\",\n                children: \"TTT\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 271,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                id: \"modal_TTT\",\n                value: TTT,\n                onChange: e => setTTT(e.target.value),\n                type: \"text\",\n                className: \"form-control required\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 272,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 270,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-2 mb-2\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"descriptor\",\n                htmlFor: \"modal_UUU\",\n                children: \"UUU\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 276,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                id: \"modal_UUU\",\n                value: UUU,\n                onChange: e => setUUU(e.target.value),\n                type: \"text\",\n                className: \"form-control required\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 277,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 275,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            onClick: e => handleSubmit(e),\n            className: \"btn btn-dark center\",\n            children: trackModalAdd ? 'Add' : 'Update'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 281,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"CloseModalButton\",\n        \"aria-label\": \"Close Modal\",\n        onClick: () => setShowTrackModal(!showTrackModal),\n        children: /*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fa fa-times\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 130\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 166,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ModalTrack, \"TjJSWTzC7oNKmlI2w2k0YaD1LQE=\");\n\n_c = ModalTrack;\nexport default ModalTrack;\n\nvar _c;\n\n$RefreshReg$(_c, \"ModalTrack\");","map":{"version":3,"sources":["C:/Users/richg/Documents/Projects/Op_Tracker/client/src/components/ModalTrack.jsx"],"names":["React","useRef","useState","useContext","useEffect","useCallback","operFinder","OperContext","ModalTrack","trackModalAdd","showTrackModal","setShowTrackModal","trackID","commodities","setCommodities","addCommodities","AAA","setAAA","BBB","setBBB","CCC","setCCC","DDD","setDDD","EEE","setEEE","FFF","setFFF","GGG","setGGG","HHH","setHHH","III","setIII","JJJ","setJJJ","KKK","setKKK","LLL","setLLL","MMM","setMMM","NNN","setNNN","OOO","setOOO","PPP","setPPP","QQQ","setQQQ","RRR","setRRR","SSS","setSSS","TTT","setTTT","UUU","setUUU","firstRender","fetchData","response","get","data","current","trackModalRef","className","handleSubmit","e","preventDefault","post","console","log","updateCommodity","put","updateTrack","id","map","el","closeModal","target","keyPress","key","document","addEventListener","removeEventListener","value"],"mappings":"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","sourcesContent":["// This component is an appearing modal that is used to either update known entries for the Tracker data (Table and Chart data) or \r\n//    create new ones, based on the boolean state, addModal, which is true for the latter and false for the former\r\n\r\nimport React, {useRef, useState, useContext, useEffect, useCallback } from 'react';\r\nimport operFinder from '../apis/operFinder';\r\nimport { OperContext } from '../context/OperContext';\r\n\r\nconst ModalTrack = ({ trackModalAdd, showTrackModal, setShowTrackModal, trackID }) => {\r\n    // Call upon the commodites state object (for Tracker data) from within Modal\r\n    const { commodities, setCommodities, addCommodities } = useContext(OperContext);\r\n\r\n    // Define internal state variables to use\r\n    const [ AAA, setAAA ] = useState(\"Sample\");\r\n    const [ BBB, setBBB ] = useState(0);\r\n    const [ CCC, setCCC ] = useState(0);\r\n    const [ DDD, setDDD ] = useState(0);\r\n    const [ EEE, setEEE ] = useState(0);\r\n    const [ FFF, setFFF ] = useState(0);\r\n    const [ GGG, setGGG ] = useState(0);\r\n    const [ HHH, setHHH ] = useState(0);\r\n    const [ III, setIII ] = useState(0);\r\n    const [ JJJ, setJJJ ] = useState(0);\r\n    const [ KKK, setKKK ] = useState(0);\r\n    const [ LLL, setLLL ] = useState(0);\r\n    const [ MMM, setMMM ] = useState(0);\r\n    const [ NNN, setNNN ] = useState(0);\r\n    const [ OOO, setOOO ] = useState(0);\r\n    const [ PPP, setPPP ] = useState(0);\r\n    const [ QQQ, setQQQ ] = useState(0);\r\n    const [ RRR, setRRR ] = useState(0);\r\n    const [ SSS, setSSS ] = useState(0);\r\n    const [ TTT, setTTT ] = useState(0);\r\n    const [ UUU, setUUU ] = useState(0);\r\n    \r\n    // Don't show the modal animation upon first render\r\n    const firstRender = useRef(true);\r\n    \r\n    // Whenever the modal comes up (i.e., showModel becomes true): run the fetch request from the database if the modal is needed to update, or reset \r\n    useEffect(() => {\r\n        if (!firstRender) return;\r\n        if (showTrackModal)  {\r\n            // If the modal is used to add a new record, reset the feature values (in case the modal was previously used)\r\n            if (trackModalAdd) {\r\n                setAAA(\"Sample\");\r\n                setBBB(0);\r\n                setCCC(0);\r\n                setDDD(0);\r\n                setEEE(0);\r\n                setFFF(0);\r\n                setGGG(0);\r\n                setHHH(0);\r\n                setIII(0);\r\n                setJJJ(0);\r\n                setKKK(0);\r\n                setLLL(0);\r\n                setMMM(0);\r\n                setNNN(0);\r\n                setOOO(0);\r\n                setPPP(0);\r\n                setQQQ(0);\r\n                setRRR(0);\r\n                setSSS(0);\r\n                setTTT(0);\r\n                setUUU(0);\r\n            } else {\r\n                // If the modal is used to update an existing record, fill in the feature values with what already exists.\r\n                const fetchData = async () => {\r\n                    // Get data about the tracker line highlighted\r\n                    const response = await operFinder.get(`api/v1/tracker/${trackID}`);\r\n                    setAAA(response.data.data.AAA);\r\n                    setBBB(response.data.data.BBB);\r\n                    setCCC(response.data.data.CCC);\r\n                    setDDD(response.data.data.DDD);\r\n                    setEEE(response.data.data.EEE);\r\n                    setFFF(response.data.data.FFF);\r\n                    setGGG(response.data.data.GGG);\r\n                    setHHH(response.data.data.HHH);\r\n                    setIII(response.data.data.III);\r\n                    setJJJ(response.data.data.JJJ);\r\n                    setKKK(response.data.data.KKK);\r\n                    setLLL(response.data.data.LLL);\r\n                    setMMM(response.data.data.MMM);\r\n                    setNNN(response.data.data.NNN);\r\n                    setOOO(response.data.data.OOO);\r\n                    setPPP(response.data.data.PPP);\r\n                    setQQQ(response.data.data.QQQ);\r\n                    setRRR(response.data.data.RRR);\r\n                    setSSS(response.data.data.SSS);\r\n                    setTTT(response.data.data.TTT);\r\n                    setUUU(response.data.data.UUU);\r\n                };\r\n                fetchData();\r\n            } \r\n        }\r\n    }, [showTrackModal]);\r\n\r\n    // Need fade in and out for modal on every showTrackModal change except initial render\r\n    useEffect(() => {\r\n        if ( firstRender.current ) {\r\n            firstRender.current = false\r\n        } else {\r\n            trackModalRef.current.className = showTrackModal ? 'backFadeIn' : 'back FadeOut';\r\n        }\r\n    }, [showTrackModal])\r\n\r\n    // Define function for modal submit\r\n    const handleSubmit = async (e) => {\r\n        // Don't reload page on submit\r\n        e.preventDefault();\r\n\r\n        // Add a new record to the database\r\n        if (trackModalAdd) {\r\n            // Use a try-catch block with an asyncronous function\r\n            try {\r\n                // Post new entries to the Pool baseURL\r\n                const response = await operFinder.post(\"api/v1/tracker/\", {\r\n                    AAA, BBB, CCC, DDD, EEE, FFF, GGG, HHH, III, JJJ, KKK, LLL, MMM, NNN, OOO, PPP, QQQ, RRR, SSS, TTT, UUU\r\n                });\r\n                // Add new entries to the local state object (no need for new server pull)\r\n                addCommodities(response.data.data);\r\n                console.log(\"Tracker post successfully added\");\r\n            } catch (e) {\r\n                console.log(e);\r\n            };\r\n        } else {\r\n            // Update database\r\n            try {\r\n                const updateCommodity = await operFinder.put(`api/v1/tracker/${trackID}`, {\r\n                    AAA, BBB, CCC, DDD, EEE, FFF, GGG, HHH, III, JJJ, KKK, LLL, MMM, NNN, OOO, PPP, QQQ, RRR, SSS, TTT, UUU\r\n                });\r\n                // Update commodities context so cards show new results\r\n                const updateTrack = {id: trackID, AAA, BBB, CCC, DDD, EEE, FFF, GGG, HHH, III, JJJ, KKK, LLL, MMM, NNN, OOO, PPP, QQQ, RRR, SSS, TTT, UUU};\r\n                setCommodities(commodities.map(el => el.id === updateTrack.id ? updateTrack : el));\r\n                console.log(\"Tracker post successfully updated\");\r\n            } catch (e) {\r\n                console.log(e);\r\n            }\r\n            \r\n        }\r\n\r\n        // Don't show modal after submit\r\n        setShowTrackModal(!showTrackModal);\r\n    };\r\n    \r\n    // Close Modal if clicking on the background (i.e., outside the modal)\r\n    const trackModalRef = useRef();\r\n    const closeModal = e => {\r\n        if(trackModalRef.current === e.target) {\r\n            setShowTrackModal(false);\r\n        }\r\n    }\r\n\r\n    // Set use to dismiss Modal on 'esc' key press only when Modal is up\r\n    const keyPress = useCallback(e => {\r\n        if(e.key === 'Escape' && showTrackModal) {\r\n            setShowTrackModal(false);\r\n        }\r\n    }, [ showTrackModal ])\r\n\r\n    useEffect(() => {\r\n        document.addEventListener('keydown', keyPress);\r\n        return () => document.removeEventListener('keydown', keyPress)\r\n    }, [keyPress])\r\n\r\n    return (\r\n        <div className='back' ref={trackModalRef} onClick={closeModal}>\r\n            <div className='ModalWrapper'>\r\n                <div className='ModalContent'>\r\n                    {trackModalAdd ? <h1>Add New Commodity</h1> : <h1>Update Commodity</h1>}\r\n                    \r\n                    <form action=\"\" className='container'>\r\n                        <div className='row'>\r\n                        {/* Set commodity name on separate line */}\r\n                        <div className=\"col-12 mb-2\">\r\n                            <label className='descriptor' htmlFor=\"modal_AAA\">AAA</label>\r\n                            <input id='modal_AAA' value={AAA} onChange={e => setAAA(e.target.value)} type=\"text\" className='form-control required' />\r\n                            <div className='descr'><span className='warning-text'>Required AAA Name and each value below</span></div>\r\n                        </div>\r\n                        {/* Every other input is a integer that can't be excluded */}\r\n                        <div className=\"col-2 mb-2\">\r\n                            <label className='descriptor' htmlFor=\"modal_BBB\">BBB</label>\r\n                            <input id='modal_BBB' value={BBB} onChange={e => setBBB(e.target.value)} type=\"text\" className='form-control required' />\r\n                            {/* <div className='descr'><span className='warning-text'>Required Input</span></div> */}\r\n                        </div>\r\n                        <div className=\"col-2 mb-2\">\r\n                            <label className='descriptor' htmlFor=\"modal_CCC\">CCC</label>\r\n                            <input id='modal_CCC' value={CCC} onChange={e => setCCC(e.target.value)} type=\"text\" className='form-control required' />\r\n                            {/* <div className='descr'><span className='warning-text'>Required Input</span></div> */}\r\n                        </div>\r\n                        <div className=\"col-2 mb-2\">\r\n                            <label className='descriptor' htmlFor=\"modal_DDD\">DDD</label>\r\n                            <input id='modal_DDD' value={DDD} onChange={e => setDDD(e.target.value)} type=\"text\" className='form-control required' />\r\n                            {/* <div className='descr'><span className='warning-text'>Required Input</span></div> */}\r\n                        </div>\r\n                        <div className=\"col-2 mb-2\">\r\n                            <label className='descriptor' htmlFor=\"modal_EEE\">EEE</label>\r\n                            <input id='modal_EEE' value={EEE} onChange={e => setEEE(e.target.value)} type=\"text\" className='form-control required' />\r\n                            {/* <div className='descr'><span className='warning-text'>Required Input</span></div> */}\r\n                        </div>\r\n                        <div className=\"col-2 mb-2\">\r\n                            <label className='descriptor' htmlFor=\"modal_FFF\">FFF</label>\r\n                            <input id='modal_FFF' value={FFF} onChange={e => setFFF(e.target.value)} type=\"text\" className='form-control required' />\r\n                            {/* <div className='descr'><span className='warning-text'>Required Input</span></div> */}\r\n                        </div>\r\n                        <div className=\"col-2 mb-2\">\r\n                            <label className='descriptor' htmlFor=\"modal_GGG\">GGG</label>\r\n                            <input id='modal_GGG' value={GGG} onChange={e => setGGG(e.target.value)} type=\"text\" className='form-control required' />\r\n                            {/* <div className='descr'><span className='warning-text'>Required Input</span></div> */}\r\n                        </div>\r\n                        <div className=\"col-2 mb-2\">\r\n                            <label className='descriptor' htmlFor=\"modal_HHH\">HHH</label>\r\n                            <input id='modal_HHH' value={HHH} onChange={e => setHHH(e.target.value)} type=\"text\" className='form-control required' />\r\n                            {/* <div className='descr'><span className='warning-text'>Required Input</span></div> */}\r\n                        </div>\r\n                        <div className=\"col-2 mb-2\">\r\n                            <label className='descriptor' htmlFor=\"modal_III\">III</label>\r\n                            <input id='modal_III' value={III} onChange={e => setIII(e.target.value)} type=\"text\" className='form-control required' />\r\n                            {/* <div className='descr'><span className='warning-text'>Required Input</span></div> */}\r\n                        </div>\r\n                        <div className=\"col-2 mb-2\">\r\n                            <label className='descriptor' htmlFor=\"modal_JJJ\">JJJ</label>\r\n                            <input id='modal_JJJ' value={JJJ} onChange={e => setJJJ(e.target.value)} type=\"text\" className='form-control required' />\r\n                            {/* <div className='descr'><span className='warning-text'>Required Input</span></div> */}\r\n                        </div>\r\n                        <div className=\"col-2 mb-2\">\r\n                            <label className='descriptor' htmlFor=\"modal_KKK\">KKK</label>\r\n                            <input id='modal_KKK' value={KKK} onChange={e => setKKK(e.target.value)} type=\"text\" className='form-control required' />\r\n                            {/* <div className='descr'><span className='warning-text'>Required Input</span></div> */}\r\n                        </div>\r\n                        <div className=\"col-2 mb-2\">\r\n                            <label className='descriptor' htmlFor=\"modal_LLL\">LLL</label>\r\n                            <input id='modal_LLL' value={LLL} onChange={e => setLLL(e.target.value)} type=\"text\" className='form-control required' />\r\n                            {/* <div className='descr'><span className='warning-text'>Required Input</span></div> */}\r\n                        </div>\r\n                        <div className=\"col-2 mb-2\">\r\n                            <label className='descriptor' htmlFor=\"modal_MMM\">MMM</label>\r\n                            <input id='modal_MMM' value={MMM} onChange={e => setMMM(e.target.value)} type=\"text\" className='form-control required' />\r\n                            {/* <div className='descr'><span className='warning-text'>Required Input</span></div> */}\r\n                        </div>\r\n                        <div className=\"col-2 mb-2\">\r\n                            <label className='descriptor' htmlFor=\"modal_NNN\">NNN</label>\r\n                            <input id='modal_NNN' value={NNN} onChange={e => setNNN(e.target.value)} type=\"text\" className='form-control required' />\r\n                            {/* <div className='descr'><span className='warning-text'>Required Input</span></div> */}\r\n                        </div>\r\n                        <div className=\"col-2 mb-2\">\r\n                            <label className='descriptor' htmlFor=\"modal_OOO\">OOO</label>\r\n                            <input id='modal_OOO' value={OOO} onChange={e => setOOO(e.target.value)} type=\"text\" className='form-control required' />\r\n                            {/* <div className='descr'><span className='warning-text'>Required Input</span></div> */}\r\n                        </div>\r\n                        <div className=\"col-2 mb-2\">\r\n                            <label className='descriptor' htmlFor=\"modal_PPP\">PPP</label>\r\n                            <input id='modal_PPP' value={PPP} onChange={e => setPPP(e.target.value)} type=\"text\" className='form-control required' />\r\n                            {/* <div className='descr'><span className='warning-text'>Required Input</span></div> */}\r\n                        </div>\r\n                        <div className=\"col-2 mb-2\">\r\n                            <label className='descriptor' htmlFor=\"modal_QQQ\">QQQ</label>\r\n                            <input id='modal_QQQ' value={QQQ} onChange={e => setQQQ(e.target.value)} type=\"text\" className='form-control required' />\r\n                            {/* <div className='descr'><span className='warning-text'>Required Input</span></div> */}\r\n                        </div>\r\n                        <div className=\"col-2 mb-2\">\r\n                            <label className='descriptor' htmlFor=\"modal_RRR\">RRR</label>\r\n                            <input id='modal_RRR' value={RRR} onChange={e => setRRR(e.target.value)} type=\"text\" className='form-control required' />\r\n                            {/* <div className='descr'><span className='warning-text'>Required Input</span></div> */}\r\n                        </div>\r\n                        <div className=\"col-2 mb-2\">\r\n                            <label className='descriptor' htmlFor=\"modal_SSS\">SSS</label>\r\n                            <input id='modal_SSS' value={SSS} onChange={e => setSSS(e.target.value)} type=\"text\" className='form-control required' />\r\n                            {/* <div className='descr'><span className='warning-text'>Required Input</span></div> */}\r\n                        </div>\r\n                        <div className=\"col-2 mb-2\">\r\n                            <label className='descriptor' htmlFor=\"modal_TTT\">TTT</label>\r\n                            <input id='modal_TTT' value={TTT} onChange={e => setTTT(e.target.value)} type=\"text\" className='form-control required' />\r\n                            {/* <div className='descr'><span className='warning-text'>Required Input</span></div> */}\r\n                        </div>\r\n                        <div className=\"col-2 mb-2\">\r\n                            <label className='descriptor' htmlFor=\"modal_UUU\">UUU</label>\r\n                            <input id='modal_UUU' value={UUU} onChange={e => setUUU(e.target.value)} type=\"text\" className='form-control required' />\r\n                            {/* <div className='descr'><span className='warning-text'>Required Input</span></div> */}\r\n                        </div>\r\n                        </div>\r\n                        <button type=\"submit\" onClick={(e) => handleSubmit(e)} className='btn btn-dark center'>{trackModalAdd ? 'Add' : 'Update'}</button>\r\n                    </form>\r\n                </div>\r\n                <button className='CloseModalButton' aria-label='Close Modal' onClick={() => setShowTrackModal(!showTrackModal)}><i className='fa fa-times' /></button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ModalTrack;"]},"metadata":{},"sourceType":"module"}