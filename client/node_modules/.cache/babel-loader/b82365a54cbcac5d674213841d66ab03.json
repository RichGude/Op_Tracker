{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\richg\\\\Documents\\\\Projects\\\\Op_Tracker\\\\client\\\\src\\\\components\\\\TrackerTable.jsx\",\n    _s2 = $RefreshSig$();\n\nimport React, { useEffect, useState, useContext } from 'react';\nimport operFinder from '../apis/operFinder';\nimport { OperContext } from '../context/OperContext';\nimport { useTable, useSortBy, useFilters, useGlobalFilter, useAsyncDebounce } from 'react-table';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TrackerTable = () => {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  // Call upon the commodities state object from with the Table\n  // (all server fetching and updating will occurs in this component vice the TrackerChart)\n  const {\n    commodities,\n    setCommodities,\n    addCommodities\n  } = useContext(OperContext); // Define a state for saving the id of the commodity information for updating the database\n\n  const [commID, setCommID] = useState(1); // Define a state for saving identifying when the Tracker Data is loaded to know when to show data\n\n  const [isLoaded, setIsLoaded] = useState(false); // Fetch commidity data from tracker table in database\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // The axios get request is added to the baseURL value\n        const response = await operFinder.get(\"api/v1/tracker/\");\n        setCommodities(response.data.data);\n        setIsLoaded(true);\n      } catch (e) {\n        console.log(e);\n      }\n\n      ;\n    };\n\n    fetchData();\n  }, []); // Define function for deleting a record from database\n\n  const handleDelete = async (e, id) => {\n    try {\n      const response = await operFinder.delete(`api/v1/tracker/${id}`);\n      console.log(\"Commodity successfully deleted\");\n      setCommodities(commodities.filter(commodity => {\n        return commodity.id !== id;\n      }));\n    } catch (e) {\n      console.log(e);\n    }\n\n    ;\n  }; // A function for returning the header column of the table\n\n\n  const tableHeader = () => {\n    return /*#__PURE__*/_jsxDEV(\"thead\", {\n      children: Object.keys(commodities[0]).map((header, index) => {\n        return /*#__PURE__*/_jsxDEV(\"th\", {\n          children: header\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this);\n  }; // A function for the table rows (interating through each commodity in commodities, and each value in each commodity)\n\n\n  const tableBody = () => {\n    // Initialize an empty array to store every row of entries\n    let bodyList = [];\n    commodities.map(commodity => {\n      let feature_list = []; // For each feature in each commodity, add to the feature to list and push to bodyList \n\n      Object.keys(commodity).map(feature_key => feature_list.push( /*#__PURE__*/_jsxDEV(\"td\", {\n        children: commodity[feature_key]\n      }, commodity.id.toString() + feature_key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 21\n      }, this)));\n      bodyList.push( /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: feature_list\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 27\n      }, this));\n    });\n    return bodyList;\n  }; // Define a custom function for rendering Tracker Table (necessary for small time before fetch request of data)\n\n\n  const renderTable = () => {\n    if (!isLoaded) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 20\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"table-responsive\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"table table-striped table-sm\",\n          children: [tableHeader(), tableBody()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 13\n      }, this);\n    }\n  }; // ## Define elements for displaying an interactive table ## //\n  // Define elements for filtering and sorting\n\n\n  function GlobalFilter(_ref) {\n    _s();\n\n    let {\n      preGlobalFilteredRows,\n      globalFilter,\n      setGlobalFilter\n    } = _ref;\n    const count = preGlobalFilteredRows.length;\n    const [value, setValue] = React.useState(globalFilter);\n    const onChange = useAsyncDebounce(value => {\n      setGlobalFilter(value || undefined);\n    }, 200);\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      children: [\"Search:\", ' ', /*#__PURE__*/_jsxDEV(\"input\", {\n        value: value || \"\",\n        onChange: e => {\n          setValue(e.target.value);\n          onChange(e.target.value);\n        },\n        placeholder: `${count} records...`,\n        style: {\n          fontSize: '1.1rem',\n          border: '0'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }, this);\n  } // Define a default UI for filtering\n\n\n  _s(GlobalFilter, \"YS3VHVSFNCck+Yf4dEeu8euANjI=\", false, function () {\n    return [useAsyncDebounce];\n  });\n\n  function DefaultColumnFilter(_ref2) {\n    let {\n      column: {\n        filterValue,\n        preFilteredRows,\n        setFilter\n      }\n    } = _ref2;\n    const count = preFilteredRows.length;\n    return /*#__PURE__*/_jsxDEV(\"input\", {\n      value: filterValue || '',\n      onChange: e => {\n        setFilter(e.target.value || undefined); // Set undefined to remove the filter entirely\n      },\n      placeholder: `Search ${count} records...`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }, this);\n  }\n\n  ;\n  const defaultColumn = React.useMemo(() => ({\n    // Set up default Filter UI\n    Filter: DefaultColumnFilter\n  }), []); // Define a function that only runs after the data \n  // Define list of objects to coincide with ReactTable Format (dumb that I have to write this all out...)\n\n  const columns = React.useMemo(() => [{\n    Header: 'AAA',\n    accessor: 'AAA'\n  }, {\n    Header: 'BBB',\n    accessor: 'BBB'\n  }, {\n    Header: 'CCC',\n    accessor: 'CCC'\n  }, {\n    Header: 'DDD',\n    accessor: 'DDD'\n  }, {\n    Header: 'EEE',\n    accessor: 'EEE'\n  }, {\n    Header: 'FFF',\n    accessor: 'FFF'\n  }, {\n    Header: 'GGG',\n    accessor: 'GGG'\n  }, {\n    Header: 'HHH',\n    accessor: 'HHH'\n  }, {\n    Header: 'III',\n    accessor: 'III'\n  }, {\n    Header: 'JJJ',\n    accessor: 'JJJ'\n  }, {\n    Header: 'KKK',\n    accessor: 'KKK'\n  }, {\n    Header: 'LLL',\n    accessor: 'LLL'\n  }, {\n    Header: 'MMM',\n    accessor: 'MMM'\n  }, {\n    Header: 'NNN',\n    accessor: 'NNN'\n  }, {\n    Header: 'OOO',\n    accessor: 'OOO'\n  }, {\n    Header: 'PPP',\n    accessor: 'PPP'\n  }, {\n    Header: 'QQQ',\n    accessor: 'QQQ'\n  }, {\n    Header: 'RRR',\n    accessor: 'RRR'\n  }, {\n    Header: 'SSS',\n    accessor: 'SSS'\n  }, {\n    Header: 'TTT',\n    accessor: 'TTT'\n  }, {\n    Header: 'UUU',\n    accessor: 'UUU'\n  }]);\n  const data = React.useMemo(() => commodities);\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n    state,\n    visibleColumns,\n    preGlobalFilteredRows,\n    setGlobalFilter\n  } = useTable({\n    columns,\n    data,\n    defaultColumn // Be sure to pass the defaultColumn option\n\n  }, useFilters, useGlobalFilter, useSortBy);\n\n  const loadedTable = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"table\", { ...getTableProps(),\n        style: {\n          border: 'solid 1px black'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: [headerGroups.map(headerGroup => /*#__PURE__*/_jsxDEV(\"tr\", { ...headerGroup.getHeaderGroupProps(),\n            children: headerGroup.headers.map(column => /*#__PURE__*/_jsxDEV(\"th\", { ...column.getHeaderProps(column.getSortByToggleProps()),\n              style: {\n                borderBottom: 'solid 3px red',\n                color: 'black'\n              },\n              children: [column.render('Header'), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: column.isSorted ? column.isSortedDesc ? 'ðŸ”½' : 'ðŸ”¼' : ''\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 229,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: column.canFilter ? column.render('Filter') : null\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 236,\n                columnNumber: 25\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 221,\n              columnNumber: 25\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 21\n          }, this)), /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: /*#__PURE__*/_jsxDEV(\"th\", {\n              colSpan: visibleColumns.length,\n              style: {\n                textAlign: 'left'\n              },\n              children: /*#__PURE__*/_jsxDEV(GlobalFilter, {\n                preGlobalFilteredRows: preGlobalFilteredRows,\n                globalFilter: state.globalFilter,\n                setGlobalFilter: setGlobalFilter\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 248,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 242,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 241,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", { ...getTableBodyProps(),\n          children: rows.map(row => {\n            prepareRow(row);\n            return /*#__PURE__*/_jsxDEV(\"tr\", { ...row.getRowProps(),\n              children: row.cells.map(cell => {\n                return /*#__PURE__*/_jsxDEV(\"td\", { ...cell.getCellProps(),\n                  style: {\n                    padding: '10px',\n                    border: 'solid 1px gray'\n                  },\n                  children: cell.render('Cell')\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 263,\n                  columnNumber: 29\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 260,\n              columnNumber: 21\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 13\n    }, this);\n  };\n\n  const userTable = () => {\n    if (!isLoaded) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 20\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"table\", { ...getTableProps(),\n          style: {\n            border: 'solid 1px black'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: [headerGroups.map(headerGroup => /*#__PURE__*/_jsxDEV(\"tr\", { ...headerGroup.getHeaderGroupProps(),\n              children: headerGroup.headers.map(column => /*#__PURE__*/_jsxDEV(\"th\", { ...column.getHeaderProps(column.getSortByToggleProps()),\n                style: {\n                  borderBottom: 'solid 3px red',\n                  color: 'black'\n                },\n                children: [column.render('Header'), /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: column.isSorted ? column.isSortedDesc ? 'ðŸ”½' : 'ðŸ”¼' : ''\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 301,\n                  columnNumber: 33\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: column.canFilter ? column.render('Filter') : null\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 308,\n                  columnNumber: 29\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 293,\n                columnNumber: 29\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 291,\n              columnNumber: 25\n            }, this)), /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: /*#__PURE__*/_jsxDEV(\"th\", {\n                colSpan: visibleColumns.length,\n                style: {\n                  textAlign: 'left'\n                },\n                children: /*#__PURE__*/_jsxDEV(GlobalFilter, {\n                  preGlobalFilteredRows: preGlobalFilteredRows,\n                  globalFilter: state.globalFilter,\n                  setGlobalFilter: setGlobalFilter\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 320,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 314,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 313,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 289,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", { ...getTableBodyProps(),\n            children: rows.map(row => {\n              prepareRow(row);\n              return /*#__PURE__*/_jsxDEV(\"tr\", { ...row.getRowProps(),\n                children: row.cells.map(cell => {\n                  return /*#__PURE__*/_jsxDEV(\"td\", { ...cell.getCellProps(),\n                    style: {\n                      padding: '10px',\n                      border: 'solid 1px gray'\n                    },\n                    children: cell.render('Cell')\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 335,\n                    columnNumber: 33\n                  }, this);\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 332,\n                columnNumber: 25\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 328,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 17\n      }, this);\n    }\n\n    ;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Tabular Technical Operations Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 356,\n      columnNumber: 9\n    }, this), userTable()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 355,\n    columnNumber: 13\n  }, this);\n};\n\n_s2(TrackerTable, \"OlED+DYMzxQThv7Qtx+fDhuJW28=\", false, function () {\n  return [useTable];\n});\n\n_c = TrackerTable;\nexport default TrackerTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"TrackerTable\");","map":{"version":3,"sources":["C:/Users/richg/Documents/Projects/Op_Tracker/client/src/components/TrackerTable.jsx"],"names":["React","useEffect","useState","useContext","operFinder","OperContext","useTable","useSortBy","useFilters","useGlobalFilter","useAsyncDebounce","TrackerTable","commodities","setCommodities","addCommodities","commID","setCommID","isLoaded","setIsLoaded","fetchData","response","get","data","e","console","log","handleDelete","id","delete","filter","commodity","tableHeader","Object","keys","map","header","index","tableBody","bodyList","feature_list","feature_key","push","toString","renderTable","GlobalFilter","preGlobalFilteredRows","globalFilter","setGlobalFilter","count","length","value","setValue","onChange","undefined","target","fontSize","border","DefaultColumnFilter","column","filterValue","preFilteredRows","setFilter","defaultColumn","useMemo","Filter","columns","Header","accessor","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","state","visibleColumns","loadedTable","headerGroup","getHeaderGroupProps","headers","getHeaderProps","getSortByToggleProps","borderBottom","color","render","isSorted","isSortedDesc","canFilter","textAlign","row","getRowProps","cells","cell","getCellProps","padding","userTable"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useContext } from 'react';\r\nimport operFinder from '../apis/operFinder';\r\nimport { OperContext } from '../context/OperContext';\r\nimport { useTable, useSortBy, useFilters, useGlobalFilter, useAsyncDebounce } from 'react-table';\r\n\r\nconst TrackerTable = () => {\r\n\r\n    // Call upon the commodities state object from with the Table\r\n    // (all server fetching and updating will occurs in this component vice the TrackerChart)\r\n    const { commodities, setCommodities, addCommodities } = useContext(OperContext);\r\n\r\n    // Define a state for saving the id of the commodity information for updating the database\r\n    const [ commID, setCommID ] = useState(1)\r\n    // Define a state for saving identifying when the Tracker Data is loaded to know when to show data\r\n    const [ isLoaded, setIsLoaded ] = useState(false)\r\n\r\n    // Fetch commidity data from tracker table in database\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                // The axios get request is added to the baseURL value\r\n                const response = await operFinder.get(\"api/v1/tracker/\");\r\n                setCommodities(response.data.data);\r\n                setIsLoaded(true);\r\n            } catch (e) {\r\n                console.log(e);\r\n            };\r\n        };\r\n        fetchData();\r\n    }, []);\r\n\r\n    // Define function for deleting a record from database\r\n    const handleDelete = async (e, id) => {\r\n        try {\r\n            const response = await operFinder.delete(`api/v1/tracker/${id}`);\r\n            console.log(\"Commodity successfully deleted\");\r\n            setCommodities(commodities.filter(commodity => {\r\n                return commodity.id !== id;\r\n            }));\r\n        } catch (e) {\r\n            console.log(e);\r\n        };\r\n    };\r\n\r\n    // A function for returning the header column of the table\r\n    const tableHeader = () => {\r\n        return (\r\n            <thead>\r\n                {Object.keys(commodities[0]).map((header, index) => {\r\n                    return (\r\n                        <th key={index}>{header}</th>\r\n                    );\r\n                })} \r\n            </thead>\r\n    );};\r\n\r\n    // A function for the table rows (interating through each commodity in commodities, and each value in each commodity)\r\n    const tableBody = () => {\r\n        // Initialize an empty array to store every row of entries\r\n        let bodyList = [];\r\n        commodities.map(commodity => {\r\n            let feature_list = [];\r\n            // For each feature in each commodity, add to the feature to list and push to bodyList \r\n            Object.keys(commodity).map(feature_key => (\r\n                feature_list.push(\r\n                    <td key={(commodity.id.toString()+feature_key)}>\r\n                        {commodity[feature_key]}\r\n                    </td>\r\n                )\r\n            ));\r\n            bodyList.push(<tr>{feature_list}</tr>);\r\n        })\r\n        \r\n        return bodyList;\r\n    };\r\n\r\n    // Define a custom function for rendering Tracker Table (necessary for small time before fetch request of data)\r\n    const renderTable = () => {\r\n        if (!isLoaded) {\r\n            return <div>Loading</div>\r\n        } else {\r\n            return (\r\n            <div className=\"table-responsive\">\r\n            <table className=\"table table-striped table-sm\">\r\n                {tableHeader()}\r\n                {tableBody()}\r\n            </table>\r\n        </div>\r\n    )}};\r\n    \r\n    // ## Define elements for displaying an interactive table ## //\r\n    \r\n    // Define elements for filtering and sorting\r\n    function GlobalFilter({\r\n        preGlobalFilteredRows,\r\n        globalFilter,\r\n        setGlobalFilter,\r\n      }) {\r\n        const count = preGlobalFilteredRows.length\r\n        const [ value, setValue ] = React.useState(globalFilter)\r\n        const onChange = useAsyncDebounce(value => {\r\n            setGlobalFilter(value || undefined)\r\n        }, 200)\r\n\r\n        return (\r\n            <span>Search:{' '}\r\n                <input\r\n                    value={value || \"\"}\r\n                    onChange={e => {\r\n                        setValue(e.target.value);\r\n                        onChange(e.target.value);\r\n                    }}\r\n                    placeholder={`${count} records...`}\r\n                    style={{\r\n                        fontSize: '1.1rem',\r\n                        border: '0',\r\n                    }}/>\r\n            </span>\r\n        )}\r\n    \r\n    // Define a default UI for filtering\r\n    function DefaultColumnFilter({\r\n        column: { filterValue, preFilteredRows, setFilter },\r\n    }) {\r\n        const count = preFilteredRows.length\r\n\r\n        return (\r\n            <input\r\n                value={filterValue || ''}\r\n                onChange={e => {\r\n                    setFilter(e.target.value || undefined) // Set undefined to remove the filter entirely\r\n                }}\r\n                placeholder={`Search ${count} records...`} />\r\n    );};\r\n\r\n    const defaultColumn = React.useMemo(\r\n        () => ({\r\n          // Set up default Filter UI\r\n          Filter: DefaultColumnFilter,\r\n        }),\r\n        []\r\n    )\r\n    \r\n    // Define a function that only runs after the data \r\n\r\n    // Define list of objects to coincide with ReactTable Format (dumb that I have to write this all out...)\r\n    const columns = React.useMemo(() => [\r\n        {   Header: 'AAA',\r\n            accessor: 'AAA'},\r\n        {   Header: 'BBB',\r\n            accessor: 'BBB'},\r\n        {   Header: 'CCC',\r\n            accessor: 'CCC'},\r\n        {   Header: 'DDD',\r\n            accessor: 'DDD'},\r\n        {   Header: 'EEE',\r\n            accessor: 'EEE'},\r\n        {   Header: 'FFF',\r\n            accessor: 'FFF'},\r\n        {   Header: 'GGG',\r\n            accessor: 'GGG'},\r\n        {   Header: 'HHH',\r\n            accessor: 'HHH'},\r\n        {   Header: 'III',\r\n            accessor: 'III'},\r\n        {   Header: 'JJJ',\r\n            accessor: 'JJJ'},\r\n        {   Header: 'KKK',\r\n            accessor: 'KKK'},\r\n        {   Header: 'LLL',\r\n            accessor: 'LLL'},\r\n        {   Header: 'MMM',\r\n            accessor: 'MMM'},\r\n        {   Header: 'NNN',\r\n            accessor: 'NNN'},\r\n        {   Header: 'OOO',\r\n            accessor: 'OOO'},\r\n        {   Header: 'PPP',\r\n            accessor: 'PPP'},\r\n        {   Header: 'QQQ',\r\n            accessor: 'QQQ'},\r\n        {   Header: 'RRR',\r\n            accessor: 'RRR'},\r\n        {   Header: 'SSS',\r\n            accessor: 'SSS'},\r\n        {   Header: 'TTT',\r\n            accessor: 'TTT'},\r\n        {   Header: 'UUU',\r\n            accessor: 'UUU'}\r\n    ]);\r\n    \r\n    const data = React.useMemo(() => commodities);\r\n    \r\n    const {\r\n        getTableProps,\r\n        getTableBodyProps,\r\n        headerGroups,\r\n        rows,\r\n        prepareRow,\r\n        state,\r\n        visibleColumns,\r\n        preGlobalFilteredRows,\r\n        setGlobalFilter,\r\n    } = useTable({\r\n        columns,\r\n        data,\r\n        defaultColumn, // Be sure to pass the defaultColumn option\r\n        },\r\n        useFilters,\r\n        useGlobalFilter,\r\n        useSortBy\r\n    );\r\n    const loadedTable = () => {\r\n        return (\r\n            <div>\r\n            <table {...getTableProps()} style={{ border: 'solid 1px black' }}>\r\n                <thead>\r\n                {headerGroups.map(headerGroup => (\r\n                    <tr {...headerGroup.getHeaderGroupProps()}>\r\n                    {headerGroup.headers.map(column => (\r\n                        <th\r\n                            {...column.getHeaderProps(column.getSortByToggleProps())}\r\n                            style={{\r\n                                borderBottom: 'solid 3px red',\r\n                                color: 'black',\r\n                            }}\r\n                        >\r\n                            {column.render('Header')}\r\n                            <span>\r\n                            {column.isSorted\r\n                                ? column.isSortedDesc\r\n                                    ? 'ðŸ”½'\r\n                                    : 'ðŸ”¼'\r\n                                : ''}\r\n                        </span>\r\n                        <div>{column.canFilter ? column.render('Filter') : null}</div>\r\n                        </th>\r\n                    ))}\r\n                    </tr>\r\n                ))}\r\n                <tr>\r\n                <th\r\n                    colSpan={visibleColumns.length}\r\n                    style={{\r\n                    textAlign: 'left',\r\n                    }}\r\n                >\r\n                    <GlobalFilter\r\n                    preGlobalFilteredRows={preGlobalFilteredRows}\r\n                    globalFilter={state.globalFilter}\r\n                    setGlobalFilter={setGlobalFilter}\r\n                    />\r\n                </th>\r\n                </tr>\r\n                </thead>\r\n                <tbody {...getTableBodyProps()}>\r\n                {rows.map(row => {\r\n                prepareRow(row)\r\n                return (\r\n                    <tr {...row.getRowProps()}>\r\n                        {row.cells.map(cell => {\r\n                        return (\r\n                            <td\r\n                                {...cell.getCellProps()}\r\n                                style={{\r\n                                    padding: '10px',\r\n                                    border: 'solid 1px gray',\r\n                                }}>\r\n                                {cell.render('Cell')}\r\n                            </td>\r\n                        )\r\n                        })}\r\n                    </tr>\r\n                )\r\n                })}\r\n                </tbody>\r\n            </table>\r\n            </div>\r\n        );\r\n    };\r\n\r\n    const userTable = () => {\r\n        if (!isLoaded) {\r\n            return <div>Loading</div>\r\n        } else {\r\n            return (\r\n                <div>\r\n                <table {...getTableProps()} style={{ border: 'solid 1px black' }}>\r\n                    <thead>\r\n                    {headerGroups.map(headerGroup => (\r\n                        <tr {...headerGroup.getHeaderGroupProps()}>\r\n                        {headerGroup.headers.map(column => (\r\n                            <th\r\n                                {...column.getHeaderProps(column.getSortByToggleProps())}\r\n                                style={{\r\n                                    borderBottom: 'solid 3px red',\r\n                                    color: 'black',\r\n                                }}\r\n                            >\r\n                                {column.render('Header')}\r\n                                <span>\r\n                                {column.isSorted\r\n                                    ? column.isSortedDesc\r\n                                        ? 'ðŸ”½'\r\n                                        : 'ðŸ”¼'\r\n                                    : ''}\r\n                            </span>\r\n                            <div>{column.canFilter ? column.render('Filter') : null}</div>\r\n                            </th>\r\n                        ))}\r\n                        </tr>\r\n                    ))}\r\n                    <tr>\r\n                    <th\r\n                        colSpan={visibleColumns.length}\r\n                        style={{\r\n                        textAlign: 'left',\r\n                        }}\r\n                    >\r\n                        <GlobalFilter\r\n                        preGlobalFilteredRows={preGlobalFilteredRows}\r\n                        globalFilter={state.globalFilter}\r\n                        setGlobalFilter={setGlobalFilter}\r\n                        />\r\n                    </th>\r\n                    </tr>\r\n                    </thead>\r\n                    <tbody {...getTableBodyProps()}>\r\n                    {rows.map(row => {\r\n                    prepareRow(row)\r\n                    return (\r\n                        <tr {...row.getRowProps()}>\r\n                            {row.cells.map(cell => {\r\n                            return (\r\n                                <td\r\n                                    {...cell.getCellProps()}\r\n                                    style={{\r\n                                        padding: '10px',\r\n                                        border: 'solid 1px gray',\r\n                                    }}>\r\n                                    {cell.render('Cell')}\r\n                                </td>\r\n                            )\r\n                            })}\r\n                        </tr>\r\n                    )\r\n                    })}\r\n                    </tbody>\r\n                </table>\r\n                </div>\r\n            );\r\n    };};\r\n\r\n\r\n    return (<div className='main'>\r\n        <h2>Tabular Technical Operations Data</h2>\r\n        {userTable()}        \r\n    </div>);\r\n};\r\n\r\nexport default TrackerTable;"]},"metadata":{},"sourceType":"module"}